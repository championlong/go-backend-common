// Code generated by Thrift Compiler (0.20.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"hbase"
)

var _ = hbase.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  bool exists(string table, TGet tget)")
  fmt.Fprintln(os.Stderr, "   existsAll(string table,  tgets)")
  fmt.Fprintln(os.Stderr, "  TResult get(string table, TGet tget)")
  fmt.Fprintln(os.Stderr, "   getMultiple(string table,  tgets)")
  fmt.Fprintln(os.Stderr, "  void put(string table, TPut tput)")
  fmt.Fprintln(os.Stderr, "  bool checkAndPut(string table, string row, string family, string qualifier, string value, TPut tput)")
  fmt.Fprintln(os.Stderr, "  void putMultiple(string table,  tputs)")
  fmt.Fprintln(os.Stderr, "  void deleteSingle(string table, TDelete tdelete)")
  fmt.Fprintln(os.Stderr, "   deleteMultiple(string table,  tdeletes)")
  fmt.Fprintln(os.Stderr, "  bool checkAndDelete(string table, string row, string family, string qualifier, string value, TDelete tdelete)")
  fmt.Fprintln(os.Stderr, "  TResult increment(string table, TIncrement tincrement)")
  fmt.Fprintln(os.Stderr, "  TResult append(string table, TAppend tappend)")
  fmt.Fprintln(os.Stderr, "  i32 openScanner(string table, TScan tscan)")
  fmt.Fprintln(os.Stderr, "   getScannerRows(i32 scannerId, i32 numRows)")
  fmt.Fprintln(os.Stderr, "  void closeScanner(i32 scannerId)")
  fmt.Fprintln(os.Stderr, "  void mutateRow(string table, TRowMutations trowMutations)")
  fmt.Fprintln(os.Stderr, "   getScannerResults(string table, TScan tscan, i32 numRows)")
  fmt.Fprintln(os.Stderr, "  THRegionLocation getRegionLocation(string table, string row, bool reload)")
  fmt.Fprintln(os.Stderr, "   getAllRegionLocations(string table)")
  fmt.Fprintln(os.Stderr, "  bool checkAndMutate(string table, string row, string family, string qualifier, TCompareOperator compareOperator, string value, TRowMutations rowMutations)")
  fmt.Fprintln(os.Stderr, "  TTableDescriptor getTableDescriptor(TTableName table)")
  fmt.Fprintln(os.Stderr, "   getTableDescriptors( tables)")
  fmt.Fprintln(os.Stderr, "  bool tableExists(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "   getTableDescriptorsByPattern(string regex, bool includeSysTables)")
  fmt.Fprintln(os.Stderr, "   getTableDescriptorsByNamespace(string name)")
  fmt.Fprintln(os.Stderr, "   getTableNamesByPattern(string regex, bool includeSysTables)")
  fmt.Fprintln(os.Stderr, "   getTableNamesByNamespace(string name)")
  fmt.Fprintln(os.Stderr, "  void createTable(TTableDescriptor desc,  splitKeys)")
  fmt.Fprintln(os.Stderr, "  void deleteTable(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "  void truncateTable(TTableName tableName, bool preserveSplits)")
  fmt.Fprintln(os.Stderr, "  void enableTable(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "  void disableTable(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "  bool isTableEnabled(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "  bool isTableDisabled(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "  bool isTableAvailable(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "  bool isTableAvailableWithSplit(TTableName tableName,  splitKeys)")
  fmt.Fprintln(os.Stderr, "  void addColumnFamily(TTableName tableName, TColumnFamilyDescriptor column)")
  fmt.Fprintln(os.Stderr, "  void deleteColumnFamily(TTableName tableName, string column)")
  fmt.Fprintln(os.Stderr, "  void modifyColumnFamily(TTableName tableName, TColumnFamilyDescriptor column)")
  fmt.Fprintln(os.Stderr, "  void modifyTable(TTableDescriptor desc)")
  fmt.Fprintln(os.Stderr, "  void createNamespace(TNamespaceDescriptor namespaceDesc)")
  fmt.Fprintln(os.Stderr, "  void modifyNamespace(TNamespaceDescriptor namespaceDesc)")
  fmt.Fprintln(os.Stderr, "  void deleteNamespace(string name)")
  fmt.Fprintln(os.Stderr, "  TNamespaceDescriptor getNamespaceDescriptor(string name)")
  fmt.Fprintln(os.Stderr, "   listNamespaceDescriptors()")
  fmt.Fprintln(os.Stderr, "   listNamespaces()")
  fmt.Fprintln(os.Stderr, "  TThriftServerType getThriftServerType()")
  fmt.Fprintln(os.Stderr, "  string getClusterId()")
  fmt.Fprintln(os.Stderr, "   getSlowLogResponses( serverNames, TLogQueryFilter logQueryFilter)")
  fmt.Fprintln(os.Stderr, "   clearSlowLogResponses( serverNames)")
  fmt.Fprintln(os.Stderr, "  bool grant(TAccessControlEntity info)")
  fmt.Fprintln(os.Stderr, "  bool revoke(TAccessControlEntity info)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := hbase.NewTHBaseServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "exists":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Exists requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg346 := flag.Arg(2)
    mbTrans347 := thrift.NewTMemoryBufferLen(len(arg346))
    defer mbTrans347.Close()
    _, err348 := mbTrans347.WriteString(arg346)
    if err348 != nil {
      Usage()
      return
    }
    factory349 := thrift.NewTJSONProtocolFactory()
    jsProt350 := factory349.GetProtocol(mbTrans347)
    argvalue1 := hbase.NewTGet()
    err351 := argvalue1.Read(context.Background(), jsProt350)
    if err351 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Exists(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "existsAll":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExistsAll requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg353 := flag.Arg(2)
    mbTrans354 := thrift.NewTMemoryBufferLen(len(arg353))
    defer mbTrans354.Close()
    _, err355 := mbTrans354.WriteString(arg353)
    if err355 != nil { 
      Usage()
      return
    }
    factory356 := thrift.NewTJSONProtocolFactory()
    jsProt357 := factory356.GetProtocol(mbTrans354)
    containerStruct1 := hbase.NewTHBaseServiceExistsAllArgs()
    err358 := containerStruct1.ReadField2(context.Background(), jsProt357)
    if err358 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Tgets
    value1 := argvalue1
    fmt.Print(client.ExistsAll(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Get requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg360 := flag.Arg(2)
    mbTrans361 := thrift.NewTMemoryBufferLen(len(arg360))
    defer mbTrans361.Close()
    _, err362 := mbTrans361.WriteString(arg360)
    if err362 != nil {
      Usage()
      return
    }
    factory363 := thrift.NewTJSONProtocolFactory()
    jsProt364 := factory363.GetProtocol(mbTrans361)
    argvalue1 := hbase.NewTGet()
    err365 := argvalue1.Read(context.Background(), jsProt364)
    if err365 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Get(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getMultiple":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMultiple requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg367 := flag.Arg(2)
    mbTrans368 := thrift.NewTMemoryBufferLen(len(arg367))
    defer mbTrans368.Close()
    _, err369 := mbTrans368.WriteString(arg367)
    if err369 != nil { 
      Usage()
      return
    }
    factory370 := thrift.NewTJSONProtocolFactory()
    jsProt371 := factory370.GetProtocol(mbTrans368)
    containerStruct1 := hbase.NewTHBaseServiceGetMultipleArgs()
    err372 := containerStruct1.ReadField2(context.Background(), jsProt371)
    if err372 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Tgets
    value1 := argvalue1
    fmt.Print(client.GetMultiple(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "put":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Put requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg374 := flag.Arg(2)
    mbTrans375 := thrift.NewTMemoryBufferLen(len(arg374))
    defer mbTrans375.Close()
    _, err376 := mbTrans375.WriteString(arg374)
    if err376 != nil {
      Usage()
      return
    }
    factory377 := thrift.NewTJSONProtocolFactory()
    jsProt378 := factory377.GetProtocol(mbTrans375)
    argvalue1 := hbase.NewTPut()
    err379 := argvalue1.Read(context.Background(), jsProt378)
    if err379 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Put(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "checkAndPut":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "CheckAndPut requires 6 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    arg385 := flag.Arg(6)
    mbTrans386 := thrift.NewTMemoryBufferLen(len(arg385))
    defer mbTrans386.Close()
    _, err387 := mbTrans386.WriteString(arg385)
    if err387 != nil {
      Usage()
      return
    }
    factory388 := thrift.NewTJSONProtocolFactory()
    jsProt389 := factory388.GetProtocol(mbTrans386)
    argvalue5 := hbase.NewTPut()
    err390 := argvalue5.Read(context.Background(), jsProt389)
    if err390 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    fmt.Print(client.CheckAndPut(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "putMultiple":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PutMultiple requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg392 := flag.Arg(2)
    mbTrans393 := thrift.NewTMemoryBufferLen(len(arg392))
    defer mbTrans393.Close()
    _, err394 := mbTrans393.WriteString(arg392)
    if err394 != nil { 
      Usage()
      return
    }
    factory395 := thrift.NewTJSONProtocolFactory()
    jsProt396 := factory395.GetProtocol(mbTrans393)
    containerStruct1 := hbase.NewTHBaseServicePutMultipleArgs()
    err397 := containerStruct1.ReadField2(context.Background(), jsProt396)
    if err397 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Tputs
    value1 := argvalue1
    fmt.Print(client.PutMultiple(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteSingle":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteSingle requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg399 := flag.Arg(2)
    mbTrans400 := thrift.NewTMemoryBufferLen(len(arg399))
    defer mbTrans400.Close()
    _, err401 := mbTrans400.WriteString(arg399)
    if err401 != nil {
      Usage()
      return
    }
    factory402 := thrift.NewTJSONProtocolFactory()
    jsProt403 := factory402.GetProtocol(mbTrans400)
    argvalue1 := hbase.NewTDelete()
    err404 := argvalue1.Read(context.Background(), jsProt403)
    if err404 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.DeleteSingle(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteMultiple":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteMultiple requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg406 := flag.Arg(2)
    mbTrans407 := thrift.NewTMemoryBufferLen(len(arg406))
    defer mbTrans407.Close()
    _, err408 := mbTrans407.WriteString(arg406)
    if err408 != nil { 
      Usage()
      return
    }
    factory409 := thrift.NewTJSONProtocolFactory()
    jsProt410 := factory409.GetProtocol(mbTrans407)
    containerStruct1 := hbase.NewTHBaseServiceDeleteMultipleArgs()
    err411 := containerStruct1.ReadField2(context.Background(), jsProt410)
    if err411 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Tdeletes
    value1 := argvalue1
    fmt.Print(client.DeleteMultiple(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "checkAndDelete":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "CheckAndDelete requires 6 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    arg417 := flag.Arg(6)
    mbTrans418 := thrift.NewTMemoryBufferLen(len(arg417))
    defer mbTrans418.Close()
    _, err419 := mbTrans418.WriteString(arg417)
    if err419 != nil {
      Usage()
      return
    }
    factory420 := thrift.NewTJSONProtocolFactory()
    jsProt421 := factory420.GetProtocol(mbTrans418)
    argvalue5 := hbase.NewTDelete()
    err422 := argvalue5.Read(context.Background(), jsProt421)
    if err422 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    fmt.Print(client.CheckAndDelete(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "increment":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Increment requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg424 := flag.Arg(2)
    mbTrans425 := thrift.NewTMemoryBufferLen(len(arg424))
    defer mbTrans425.Close()
    _, err426 := mbTrans425.WriteString(arg424)
    if err426 != nil {
      Usage()
      return
    }
    factory427 := thrift.NewTJSONProtocolFactory()
    jsProt428 := factory427.GetProtocol(mbTrans425)
    argvalue1 := hbase.NewTIncrement()
    err429 := argvalue1.Read(context.Background(), jsProt428)
    if err429 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Increment(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "append":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Append requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg431 := flag.Arg(2)
    mbTrans432 := thrift.NewTMemoryBufferLen(len(arg431))
    defer mbTrans432.Close()
    _, err433 := mbTrans432.WriteString(arg431)
    if err433 != nil {
      Usage()
      return
    }
    factory434 := thrift.NewTJSONProtocolFactory()
    jsProt435 := factory434.GetProtocol(mbTrans432)
    argvalue1 := hbase.NewTAppend()
    err436 := argvalue1.Read(context.Background(), jsProt435)
    if err436 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Append(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "openScanner":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "OpenScanner requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg438 := flag.Arg(2)
    mbTrans439 := thrift.NewTMemoryBufferLen(len(arg438))
    defer mbTrans439.Close()
    _, err440 := mbTrans439.WriteString(arg438)
    if err440 != nil {
      Usage()
      return
    }
    factory441 := thrift.NewTJSONProtocolFactory()
    jsProt442 := factory441.GetProtocol(mbTrans439)
    argvalue1 := hbase.NewTScan()
    err443 := argvalue1.Read(context.Background(), jsProt442)
    if err443 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.OpenScanner(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getScannerRows":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetScannerRows requires 2 args")
      flag.Usage()
    }
    tmp0, err444 := (strconv.Atoi(flag.Arg(1)))
    if err444 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err445 := (strconv.Atoi(flag.Arg(2)))
    if err445 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetScannerRows(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "closeScanner":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CloseScanner requires 1 args")
      flag.Usage()
    }
    tmp0, err446 := (strconv.Atoi(flag.Arg(1)))
    if err446 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.CloseScanner(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mutateRow":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MutateRow requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg448 := flag.Arg(2)
    mbTrans449 := thrift.NewTMemoryBufferLen(len(arg448))
    defer mbTrans449.Close()
    _, err450 := mbTrans449.WriteString(arg448)
    if err450 != nil {
      Usage()
      return
    }
    factory451 := thrift.NewTJSONProtocolFactory()
    jsProt452 := factory451.GetProtocol(mbTrans449)
    argvalue1 := hbase.NewTRowMutations()
    err453 := argvalue1.Read(context.Background(), jsProt452)
    if err453 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MutateRow(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getScannerResults":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetScannerResults requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg455 := flag.Arg(2)
    mbTrans456 := thrift.NewTMemoryBufferLen(len(arg455))
    defer mbTrans456.Close()
    _, err457 := mbTrans456.WriteString(arg455)
    if err457 != nil {
      Usage()
      return
    }
    factory458 := thrift.NewTJSONProtocolFactory()
    jsProt459 := factory458.GetProtocol(mbTrans456)
    argvalue1 := hbase.NewTScan()
    err460 := argvalue1.Read(context.Background(), jsProt459)
    if err460 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err461 := (strconv.Atoi(flag.Arg(3)))
    if err461 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetScannerResults(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getRegionLocation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetRegionLocation requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.GetRegionLocation(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAllRegionLocations":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllRegionLocations requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.GetAllRegionLocations(context.Background(), value0))
    fmt.Print("\n")
    break
  case "checkAndMutate":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "CheckAndMutate requires 7 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    tmp4, err := (strconv.Atoi(flag.Arg(5)))
    if err != nil {
      Usage()
     return
    }
    argvalue4 := hbase.TCompareOperator(tmp4)
    value4 := argvalue4
    argvalue5 := []byte(flag.Arg(6))
    value5 := argvalue5
    arg471 := flag.Arg(7)
    mbTrans472 := thrift.NewTMemoryBufferLen(len(arg471))
    defer mbTrans472.Close()
    _, err473 := mbTrans472.WriteString(arg471)
    if err473 != nil {
      Usage()
      return
    }
    factory474 := thrift.NewTJSONProtocolFactory()
    jsProt475 := factory474.GetProtocol(mbTrans472)
    argvalue6 := hbase.NewTRowMutations()
    err476 := argvalue6.Read(context.Background(), jsProt475)
    if err476 != nil {
      Usage()
      return
    }
    value6 := argvalue6
    fmt.Print(client.CheckAndMutate(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "getTableDescriptor":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableDescriptor requires 1 args")
      flag.Usage()
    }
    arg477 := flag.Arg(1)
    mbTrans478 := thrift.NewTMemoryBufferLen(len(arg477))
    defer mbTrans478.Close()
    _, err479 := mbTrans478.WriteString(arg477)
    if err479 != nil {
      Usage()
      return
    }
    factory480 := thrift.NewTJSONProtocolFactory()
    jsProt481 := factory480.GetProtocol(mbTrans478)
    argvalue0 := hbase.NewTTableName()
    err482 := argvalue0.Read(context.Background(), jsProt481)
    if err482 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTableDescriptor(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTableDescriptors":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableDescriptors requires 1 args")
      flag.Usage()
    }
    arg483 := flag.Arg(1)
    mbTrans484 := thrift.NewTMemoryBufferLen(len(arg483))
    defer mbTrans484.Close()
    _, err485 := mbTrans484.WriteString(arg483)
    if err485 != nil { 
      Usage()
      return
    }
    factory486 := thrift.NewTJSONProtocolFactory()
    jsProt487 := factory486.GetProtocol(mbTrans484)
    containerStruct0 := hbase.NewTHBaseServiceGetTableDescriptorsArgs()
    err488 := containerStruct0.ReadField1(context.Background(), jsProt487)
    if err488 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Tables
    value0 := argvalue0
    fmt.Print(client.GetTableDescriptors(context.Background(), value0))
    fmt.Print("\n")
    break
  case "tableExists":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TableExists requires 1 args")
      flag.Usage()
    }
    arg489 := flag.Arg(1)
    mbTrans490 := thrift.NewTMemoryBufferLen(len(arg489))
    defer mbTrans490.Close()
    _, err491 := mbTrans490.WriteString(arg489)
    if err491 != nil {
      Usage()
      return
    }
    factory492 := thrift.NewTJSONProtocolFactory()
    jsProt493 := factory492.GetProtocol(mbTrans490)
    argvalue0 := hbase.NewTTableName()
    err494 := argvalue0.Read(context.Background(), jsProt493)
    if err494 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TableExists(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTableDescriptorsByPattern":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTableDescriptorsByPattern requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.GetTableDescriptorsByPattern(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getTableDescriptorsByNamespace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableDescriptorsByNamespace requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetTableDescriptorsByNamespace(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTableNamesByPattern":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTableNamesByPattern requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.GetTableNamesByPattern(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getTableNamesByNamespace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableNamesByNamespace requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetTableNamesByNamespace(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createTable":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateTable requires 2 args")
      flag.Usage()
    }
    arg501 := flag.Arg(1)
    mbTrans502 := thrift.NewTMemoryBufferLen(len(arg501))
    defer mbTrans502.Close()
    _, err503 := mbTrans502.WriteString(arg501)
    if err503 != nil {
      Usage()
      return
    }
    factory504 := thrift.NewTJSONProtocolFactory()
    jsProt505 := factory504.GetProtocol(mbTrans502)
    argvalue0 := hbase.NewTTableDescriptor()
    err506 := argvalue0.Read(context.Background(), jsProt505)
    if err506 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg507 := flag.Arg(2)
    mbTrans508 := thrift.NewTMemoryBufferLen(len(arg507))
    defer mbTrans508.Close()
    _, err509 := mbTrans508.WriteString(arg507)
    if err509 != nil { 
      Usage()
      return
    }
    factory510 := thrift.NewTJSONProtocolFactory()
    jsProt511 := factory510.GetProtocol(mbTrans508)
    containerStruct1 := hbase.NewTHBaseServiceCreateTableArgs()
    err512 := containerStruct1.ReadField2(context.Background(), jsProt511)
    if err512 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.SplitKeys
    value1 := argvalue1
    fmt.Print(client.CreateTable(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteTable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteTable requires 1 args")
      flag.Usage()
    }
    arg513 := flag.Arg(1)
    mbTrans514 := thrift.NewTMemoryBufferLen(len(arg513))
    defer mbTrans514.Close()
    _, err515 := mbTrans514.WriteString(arg513)
    if err515 != nil {
      Usage()
      return
    }
    factory516 := thrift.NewTJSONProtocolFactory()
    jsProt517 := factory516.GetProtocol(mbTrans514)
    argvalue0 := hbase.NewTTableName()
    err518 := argvalue0.Read(context.Background(), jsProt517)
    if err518 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteTable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "truncateTable":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "TruncateTable requires 2 args")
      flag.Usage()
    }
    arg519 := flag.Arg(1)
    mbTrans520 := thrift.NewTMemoryBufferLen(len(arg519))
    defer mbTrans520.Close()
    _, err521 := mbTrans520.WriteString(arg519)
    if err521 != nil {
      Usage()
      return
    }
    factory522 := thrift.NewTJSONProtocolFactory()
    jsProt523 := factory522.GetProtocol(mbTrans520)
    argvalue0 := hbase.NewTTableName()
    err524 := argvalue0.Read(context.Background(), jsProt523)
    if err524 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.TruncateTable(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "enableTable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "EnableTable requires 1 args")
      flag.Usage()
    }
    arg526 := flag.Arg(1)
    mbTrans527 := thrift.NewTMemoryBufferLen(len(arg526))
    defer mbTrans527.Close()
    _, err528 := mbTrans527.WriteString(arg526)
    if err528 != nil {
      Usage()
      return
    }
    factory529 := thrift.NewTJSONProtocolFactory()
    jsProt530 := factory529.GetProtocol(mbTrans527)
    argvalue0 := hbase.NewTTableName()
    err531 := argvalue0.Read(context.Background(), jsProt530)
    if err531 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.EnableTable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "disableTable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DisableTable requires 1 args")
      flag.Usage()
    }
    arg532 := flag.Arg(1)
    mbTrans533 := thrift.NewTMemoryBufferLen(len(arg532))
    defer mbTrans533.Close()
    _, err534 := mbTrans533.WriteString(arg532)
    if err534 != nil {
      Usage()
      return
    }
    factory535 := thrift.NewTJSONProtocolFactory()
    jsProt536 := factory535.GetProtocol(mbTrans533)
    argvalue0 := hbase.NewTTableName()
    err537 := argvalue0.Read(context.Background(), jsProt536)
    if err537 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DisableTable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isTableEnabled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsTableEnabled requires 1 args")
      flag.Usage()
    }
    arg538 := flag.Arg(1)
    mbTrans539 := thrift.NewTMemoryBufferLen(len(arg538))
    defer mbTrans539.Close()
    _, err540 := mbTrans539.WriteString(arg538)
    if err540 != nil {
      Usage()
      return
    }
    factory541 := thrift.NewTJSONProtocolFactory()
    jsProt542 := factory541.GetProtocol(mbTrans539)
    argvalue0 := hbase.NewTTableName()
    err543 := argvalue0.Read(context.Background(), jsProt542)
    if err543 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsTableEnabled(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isTableDisabled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsTableDisabled requires 1 args")
      flag.Usage()
    }
    arg544 := flag.Arg(1)
    mbTrans545 := thrift.NewTMemoryBufferLen(len(arg544))
    defer mbTrans545.Close()
    _, err546 := mbTrans545.WriteString(arg544)
    if err546 != nil {
      Usage()
      return
    }
    factory547 := thrift.NewTJSONProtocolFactory()
    jsProt548 := factory547.GetProtocol(mbTrans545)
    argvalue0 := hbase.NewTTableName()
    err549 := argvalue0.Read(context.Background(), jsProt548)
    if err549 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsTableDisabled(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isTableAvailable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsTableAvailable requires 1 args")
      flag.Usage()
    }
    arg550 := flag.Arg(1)
    mbTrans551 := thrift.NewTMemoryBufferLen(len(arg550))
    defer mbTrans551.Close()
    _, err552 := mbTrans551.WriteString(arg550)
    if err552 != nil {
      Usage()
      return
    }
    factory553 := thrift.NewTJSONProtocolFactory()
    jsProt554 := factory553.GetProtocol(mbTrans551)
    argvalue0 := hbase.NewTTableName()
    err555 := argvalue0.Read(context.Background(), jsProt554)
    if err555 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsTableAvailable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isTableAvailableWithSplit":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "IsTableAvailableWithSplit requires 2 args")
      flag.Usage()
    }
    arg556 := flag.Arg(1)
    mbTrans557 := thrift.NewTMemoryBufferLen(len(arg556))
    defer mbTrans557.Close()
    _, err558 := mbTrans557.WriteString(arg556)
    if err558 != nil {
      Usage()
      return
    }
    factory559 := thrift.NewTJSONProtocolFactory()
    jsProt560 := factory559.GetProtocol(mbTrans557)
    argvalue0 := hbase.NewTTableName()
    err561 := argvalue0.Read(context.Background(), jsProt560)
    if err561 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg562 := flag.Arg(2)
    mbTrans563 := thrift.NewTMemoryBufferLen(len(arg562))
    defer mbTrans563.Close()
    _, err564 := mbTrans563.WriteString(arg562)
    if err564 != nil { 
      Usage()
      return
    }
    factory565 := thrift.NewTJSONProtocolFactory()
    jsProt566 := factory565.GetProtocol(mbTrans563)
    containerStruct1 := hbase.NewTHBaseServiceIsTableAvailableWithSplitArgs()
    err567 := containerStruct1.ReadField2(context.Background(), jsProt566)
    if err567 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.SplitKeys
    value1 := argvalue1
    fmt.Print(client.IsTableAvailableWithSplit(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "addColumnFamily":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddColumnFamily requires 2 args")
      flag.Usage()
    }
    arg568 := flag.Arg(1)
    mbTrans569 := thrift.NewTMemoryBufferLen(len(arg568))
    defer mbTrans569.Close()
    _, err570 := mbTrans569.WriteString(arg568)
    if err570 != nil {
      Usage()
      return
    }
    factory571 := thrift.NewTJSONProtocolFactory()
    jsProt572 := factory571.GetProtocol(mbTrans569)
    argvalue0 := hbase.NewTTableName()
    err573 := argvalue0.Read(context.Background(), jsProt572)
    if err573 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg574 := flag.Arg(2)
    mbTrans575 := thrift.NewTMemoryBufferLen(len(arg574))
    defer mbTrans575.Close()
    _, err576 := mbTrans575.WriteString(arg574)
    if err576 != nil {
      Usage()
      return
    }
    factory577 := thrift.NewTJSONProtocolFactory()
    jsProt578 := factory577.GetProtocol(mbTrans575)
    argvalue1 := hbase.NewTColumnFamilyDescriptor()
    err579 := argvalue1.Read(context.Background(), jsProt578)
    if err579 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AddColumnFamily(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteColumnFamily":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteColumnFamily requires 2 args")
      flag.Usage()
    }
    arg580 := flag.Arg(1)
    mbTrans581 := thrift.NewTMemoryBufferLen(len(arg580))
    defer mbTrans581.Close()
    _, err582 := mbTrans581.WriteString(arg580)
    if err582 != nil {
      Usage()
      return
    }
    factory583 := thrift.NewTJSONProtocolFactory()
    jsProt584 := factory583.GetProtocol(mbTrans581)
    argvalue0 := hbase.NewTTableName()
    err585 := argvalue0.Read(context.Background(), jsProt584)
    if err585 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.DeleteColumnFamily(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "modifyColumnFamily":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ModifyColumnFamily requires 2 args")
      flag.Usage()
    }
    arg587 := flag.Arg(1)
    mbTrans588 := thrift.NewTMemoryBufferLen(len(arg587))
    defer mbTrans588.Close()
    _, err589 := mbTrans588.WriteString(arg587)
    if err589 != nil {
      Usage()
      return
    }
    factory590 := thrift.NewTJSONProtocolFactory()
    jsProt591 := factory590.GetProtocol(mbTrans588)
    argvalue0 := hbase.NewTTableName()
    err592 := argvalue0.Read(context.Background(), jsProt591)
    if err592 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg593 := flag.Arg(2)
    mbTrans594 := thrift.NewTMemoryBufferLen(len(arg593))
    defer mbTrans594.Close()
    _, err595 := mbTrans594.WriteString(arg593)
    if err595 != nil {
      Usage()
      return
    }
    factory596 := thrift.NewTJSONProtocolFactory()
    jsProt597 := factory596.GetProtocol(mbTrans594)
    argvalue1 := hbase.NewTColumnFamilyDescriptor()
    err598 := argvalue1.Read(context.Background(), jsProt597)
    if err598 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ModifyColumnFamily(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "modifyTable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ModifyTable requires 1 args")
      flag.Usage()
    }
    arg599 := flag.Arg(1)
    mbTrans600 := thrift.NewTMemoryBufferLen(len(arg599))
    defer mbTrans600.Close()
    _, err601 := mbTrans600.WriteString(arg599)
    if err601 != nil {
      Usage()
      return
    }
    factory602 := thrift.NewTJSONProtocolFactory()
    jsProt603 := factory602.GetProtocol(mbTrans600)
    argvalue0 := hbase.NewTTableDescriptor()
    err604 := argvalue0.Read(context.Background(), jsProt603)
    if err604 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ModifyTable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createNamespace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateNamespace requires 1 args")
      flag.Usage()
    }
    arg605 := flag.Arg(1)
    mbTrans606 := thrift.NewTMemoryBufferLen(len(arg605))
    defer mbTrans606.Close()
    _, err607 := mbTrans606.WriteString(arg605)
    if err607 != nil {
      Usage()
      return
    }
    factory608 := thrift.NewTJSONProtocolFactory()
    jsProt609 := factory608.GetProtocol(mbTrans606)
    argvalue0 := hbase.NewTNamespaceDescriptor()
    err610 := argvalue0.Read(context.Background(), jsProt609)
    if err610 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateNamespace(context.Background(), value0))
    fmt.Print("\n")
    break
  case "modifyNamespace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ModifyNamespace requires 1 args")
      flag.Usage()
    }
    arg611 := flag.Arg(1)
    mbTrans612 := thrift.NewTMemoryBufferLen(len(arg611))
    defer mbTrans612.Close()
    _, err613 := mbTrans612.WriteString(arg611)
    if err613 != nil {
      Usage()
      return
    }
    factory614 := thrift.NewTJSONProtocolFactory()
    jsProt615 := factory614.GetProtocol(mbTrans612)
    argvalue0 := hbase.NewTNamespaceDescriptor()
    err616 := argvalue0.Read(context.Background(), jsProt615)
    if err616 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ModifyNamespace(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteNamespace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteNamespace requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DeleteNamespace(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getNamespaceDescriptor":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNamespaceDescriptor requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetNamespaceDescriptor(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listNamespaceDescriptors":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ListNamespaceDescriptors requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ListNamespaceDescriptors(context.Background()))
    fmt.Print("\n")
    break
  case "listNamespaces":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ListNamespaces requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ListNamespaces(context.Background()))
    fmt.Print("\n")
    break
  case "getThriftServerType":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetThriftServerType requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetThriftServerType(context.Background()))
    fmt.Print("\n")
    break
  case "getClusterId":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetClusterId requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetClusterId(context.Background()))
    fmt.Print("\n")
    break
  case "getSlowLogResponses":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetSlowLogResponses requires 2 args")
      flag.Usage()
    }
    arg619 := flag.Arg(1)
    mbTrans620 := thrift.NewTMemoryBufferLen(len(arg619))
    defer mbTrans620.Close()
    _, err621 := mbTrans620.WriteString(arg619)
    if err621 != nil { 
      Usage()
      return
    }
    factory622 := thrift.NewTJSONProtocolFactory()
    jsProt623 := factory622.GetProtocol(mbTrans620)
    containerStruct0 := hbase.NewTHBaseServiceGetSlowLogResponsesArgs()
    err624 := containerStruct0.ReadField1(context.Background(), jsProt623)
    if err624 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ServerNames
    value0 := argvalue0
    arg625 := flag.Arg(2)
    mbTrans626 := thrift.NewTMemoryBufferLen(len(arg625))
    defer mbTrans626.Close()
    _, err627 := mbTrans626.WriteString(arg625)
    if err627 != nil {
      Usage()
      return
    }
    factory628 := thrift.NewTJSONProtocolFactory()
    jsProt629 := factory628.GetProtocol(mbTrans626)
    argvalue1 := hbase.NewTLogQueryFilter()
    err630 := argvalue1.Read(context.Background(), jsProt629)
    if err630 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetSlowLogResponses(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "clearSlowLogResponses":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ClearSlowLogResponses requires 1 args")
      flag.Usage()
    }
    arg631 := flag.Arg(1)
    mbTrans632 := thrift.NewTMemoryBufferLen(len(arg631))
    defer mbTrans632.Close()
    _, err633 := mbTrans632.WriteString(arg631)
    if err633 != nil { 
      Usage()
      return
    }
    factory634 := thrift.NewTJSONProtocolFactory()
    jsProt635 := factory634.GetProtocol(mbTrans632)
    containerStruct0 := hbase.NewTHBaseServiceClearSlowLogResponsesArgs()
    err636 := containerStruct0.ReadField1(context.Background(), jsProt635)
    if err636 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ServerNames
    value0 := argvalue0
    fmt.Print(client.ClearSlowLogResponses(context.Background(), value0))
    fmt.Print("\n")
    break
  case "grant":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Grant requires 1 args")
      flag.Usage()
    }
    arg637 := flag.Arg(1)
    mbTrans638 := thrift.NewTMemoryBufferLen(len(arg637))
    defer mbTrans638.Close()
    _, err639 := mbTrans638.WriteString(arg637)
    if err639 != nil {
      Usage()
      return
    }
    factory640 := thrift.NewTJSONProtocolFactory()
    jsProt641 := factory640.GetProtocol(mbTrans638)
    argvalue0 := hbase.NewTAccessControlEntity()
    err642 := argvalue0.Read(context.Background(), jsProt641)
    if err642 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Grant(context.Background(), value0))
    fmt.Print("\n")
    break
  case "revoke":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Revoke requires 1 args")
      flag.Usage()
    }
    arg643 := flag.Arg(1)
    mbTrans644 := thrift.NewTMemoryBufferLen(len(arg643))
    defer mbTrans644.Close()
    _, err645 := mbTrans644.WriteString(arg643)
    if err645 != nil {
      Usage()
      return
    }
    factory646 := thrift.NewTJSONProtocolFactory()
    jsProt647 := factory646.GetProtocol(mbTrans644)
    argvalue0 := hbase.NewTAccessControlEntity()
    err648 := argvalue0.Read(context.Background(), jsProt647)
    if err648 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Revoke(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
